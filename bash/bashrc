# Pietro Albini's .bashrc file
#
# Script made by Pietro Albini <pietro@pietroalbini.io>
# Released under the UNLICENSE license, aka public domain

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# Setup bash
HISTCONTROL=ignoreboth
HISTSIZE=1000
HISTFILESIZE=2000
shopt -s histappend
shopt -s checkwinsize  # Check windows size every command
shopt -s globstar  # Enable **


# Allow registering custom after_command hooks
# This allows you to execute code after every other command

_bashrc_after_command=()

bashrc_after_command() {
    _bashrc_after_command=("$1" "${_bashrc_after_command[@]}")
}

bashrc_after_command_execute() {
    # Execute all the custom handlers
    for handler in "${_bashrc_after_command[@]}"; do
        eval "${handler}"
    done
}

PROMPT_COMMAND="bashrc_after_command_execute"


# Customize the PS1, adding callbacks to add things before and after it
# Use bashrc_ps1_before and bashrc_ps1_after to do so

_bashrc_ps1_before=()
_bashrc_ps1_after=()

bashrc_ps1_before() {
    _bashrc_ps1_before=("${_bashrc_ps1_before[@]}" "$1")
}

bashrc_ps1_after() {
    _bashrc_ps1_after+=("${_bashrc_ps1_after[@]}" "$1")
}


# Dynamically generate the prompt
# You can set $PS1_SIMULATE_ROOT to simulate the root prompt
# Use bashrc_ps1_before and bashrc_ps1_after to add before and after callbacks
bashrc_ps1_rebuild() {
    # REMEMBER: put color codes between "\[" and "\]"!

    PS1=""

    for extra in "${_bashrc_ps1_before[@]}"; do
        PS1+="`eval ${extra}`"
    done

    if [[ $EUID -eq 0 ]] || [[ ! -z "${PS1_SIMULATE_ROOT}" ]]; then
        PS1+="\[\e[1;35m\]`hostname`\[\e[m\]"
    else
        hash=$( hostname | sum | awk '{print($1)}')
        color=$(( hash % 200 ))
        PS1+="\[\e[1;38;5;${color}m\]`whoami`@`hostname`\[\e[m\]"
    fi

    PS1+=": "
    PS1+="\[\e[1;34m\]`pwd | sed "s%${HOME}%~%"`\[\e[m\]"

    for extra in "${_bashrc_ps1_after[@]}"; do
        PS1+="`eval ${extra}`"
    done

    if [[ $EUID -eq 0 ]] || [[ ! -z "${PS1_SIMULATE_ROOT}" ]]; then
        PS1+="# "
    else
        PS1+="$ "
    fi

    export PS1
}

bashrc_after_command "bashrc_ps1_rebuild"


# Allow registering custom command_not_found_handle hooks
# This allows to hook into it, for example adding new special commands
_bashrc_cnf_handlers=()

bashrc_cnf_handler() {
    _bashrc_cnf_handlers=("${_bashrc_cnf_handlers[@]}" "$1")
}


# Custom command_not_found_handle
# If a custom handle returns exit code 100, then no more handlers are processed
command_not_found_handle() {
    # Execute all the custom handlers
    for handler in "${_bashrc_cnf_handlers[@]}"; do
        eval "${handler}" $@
        if [[ "$?" -eq 100 ]]; then
            return
        fi
    done

    echo -e "\e[1;31mCommand not found! \e[1;00m$1"
    return 1
}


# Debian packaging information
export DEBFULLNAME="Pietro Albini"
export DEBEMAIL="pietro@pietroalbini.org"
export UBUMAIL="pietro@pietroalbini.org"

# Use the English language
export LANG="en_US.utf8"
export LC_ALL="en_US.utf8"

# Dynamically build the $PATH
PATH="${HOME}/.bashrc.d/common/bin"
for prefix in "${HOME}/.local" "/usr/local" "/usr"; do
    PATH="${PATH}:${prefix}/sbin:${prefix}/bin:${prefix}/games"
done
PATH="${PATH}:/sbin:/bin"

if type vim >/dev/null 2>&1; then
    EDITOR=vim
else
    EDITOR=vi
fi

# Add some colors around
eval "$(dircolors -b)"
alias ls='ls --group-directories-first --color=auto'
alias grep='grep --color'

# Some aliases
alias ls='ls --group-directories-first --color=auto'
alias ll='ls -al'
alias l='ls'
alias c='clear'
alias v='vim'
alias m='make'
alias s='sudo'
alias sv='sudo -E vim'
alias rebash="source ~/.bashrc"

# git aliases
gpr() {
    if [[ $# -ne 1 ]]; then
        echo "usage: gpr <number>" >&2
        return 1
    fi
    num="$1"
    git fetch origin "pull/$1/head"
    git checkout FETCH_HEAD
}
alias g='git'
alias gd='git diff'
alias gds='git diff --staged'
alias gs='git status'
alias gst='git -c commit.gpgsign=false stash'
alias ga='git add'
alias gc='git checkout'
alias gco='git commit'
alias gp='git push'
alias gf='git fetch --prune'
alias gl='git log --show-signature'
alias glo='git log --oneline --graph'
alias gcp='git cherry-pick'
alias grb='git rebase'
alias gwip='git add .; git -c commit.gpgsign=false commit -m "wip"'

# python aliases
py() {
    # Use Python 3 if not into a virtual environment
    if [[ ! -z "${VIRTUAL_ENV}" ]]; then
        python $@
    else
        python3 $@
    fi
}
alias py2='python2'
alias py3='python3'

# Tmux aliases
alias t='tmux -2'
alias ta='tmux -2 a'

alias tf='terraform'

# static web server aliases
http() {
    path="."
    port="8000"

    if [[ $# -gt 2 ]]; then
        echo "Usage: http [path] [port]"
        return 1
    fi

    if [[ $# -gt 0 ]]; then
        path="$1"
    fi

    if [[ $# -gt 1 ]]; then
        port="$2"
    fi

    if [[ ! -d "${path}" ]]; then
        echo "Directory not found: ${path}"
        return 1
    fi

    (
        cd "${path}"
        bash -c "sleep 1 && xdg-open \"http://localhost:${port}\"" &
        python3 -m http.server "${port}"
    )
}

# Notify if a command succeded
notify() {
    cmd="$@"
    $@

    result="$?"
    if [[ "${result}" -eq 0 ]]; then
        notify-send "Command succeded" "${cmd}" -u critical --icon dialog-apply
    else
        notify-send "Command failed" "${cmd}" -u critical --icon process-stop
    fi
}

# Load extra scripts from .bashrc.d
for module in "${HOME}"/.bashrc.d/*; do
    if [[ -d "${module}" ]]; then
        for file in "${module}"/*.sh; do
            source "${file}"
        done
    fi
done

# Load also the .bashrc_local file
if [[ -f "${HOME}/.bashrc_local" ]]; then
    source "${HOME}/.bashrc_local"
fi
