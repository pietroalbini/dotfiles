" My own vim configuration file
"
" Script made by Pietro Albini <pietro@pietroalbini.io>
" Released under the UNLICENSE license, aka public domain

syntax on
filetype indent plugin on
set nocompatible

function! s:source(file)
    let a:path = $HOME."/.vim/".a:file
    if !exists(a:path)
        execute 'source' fnameescape(a:path)
    endif
endfunction

" Load all plugins
runtime bundle/pathogen/autoload/pathogen.vim
execute pathogen#infect()

" Enable vim: lines at the start of the file
set modelines=20

" Yes, I use this sometimes...
set mouse=a

" Truncate too long lines
set textwidth=79
autocmd FileType gitcommit :setlocal textwidth=72

" Line numbers
set number
set numberwidth=5

" Set up colors
set t_Co=256  " 256 colors mode
color pietroalbini  " My own color scheme

" Set up tabs
set expandtab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set smarttab
set smartindent
autocmd FileType rst :setlocal shiftwidth=3 softtabstop=3
autocmd FileType yaml :setlocal shiftwidth=2 softtabstop=2
autocmd FileType make :setlocal noexpandtab

" Set up folding
set foldenable
set foldlevelstart=99
set foldnestmax=10
set foldmethod=indent
nnoremap <space> za

" Some search settings
set incsearch  " Start searching as of typing

" Highlight trailing whitespaces
set list
set listchars=trail:Â·,tab:\ \ 
hi SpecialKey ctermfg=9 ctermbg=NONE

" Adjust splits positions
set splitbelow splitright

" Load also the 2 lines above/below when scrolling
set scrolloff=2

" Highlight too long lines
" match ErrorMsg '\%>79v.\+'

" Improve vimrc editing process
augroup vimrc_reload
    autocmd!
    autocmd BufWritePost $MYVIMRC bufdo source $MYVIMRC
augroup END
nnoremap <leader>rc :vsplit $MYVIMRC<cr>:autocmd BufWritePost $MYVIMRC :bd<cr>

" Some configuration for vim-markdown
let g:vim_markdown_folding_disabled=1
let g:vim_markdown_frontmatter=1

" Some configuration for gitgutter
let g:gitgutter_override_sign_column_highlight = 0
let g:gitgutter_sign_modified = "|"
let g:gitgutter_sign_modified_removed = "|"

" Ctrl-P configuration
let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:10,results:10'
let g:ctrlp_user_command = {
\   'types': {
\       1: ['.git', 'cd %s && git ls-files -co --exclude-standard'],
\   },
\   'fallback': 'find %s -type f'
\ }

" vim-terraform configuration
let g:terraform_align=1

" vim-lsp configuration
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_signature_help_enabled = 0
let g:lsp_signs_error = {'text': 'E:'}
let g:lsp_signs_warning = {'text': 'W:'}
let g:lsp_signs_information = {'text': 'I:'}
let g:lsp_signs_hint = {'text': 'H:'}

" vim-lsp + rust-analyzer
if executable("rust-analyzer")
    au User lsp_setup call lsp#register_server({
        \ 'name': 'ra',
        \ 'cmd': {server_info->['rust-analyzer']},
        \ 'whitelist': ['rust'],
        \ })
endif

" vim-lsp + terraform-lsp
if executable("terraform-lsp")
    " https://github.com/juliosueiras/terraform-lsp
    au User lsp_setup call lsp#register_server({
        \ 'name': 'terraform',
        \ 'cmd': {server_info->['terraform-lsp']},
        \ 'whitelist': ['terraform'],
        \ })
endif

call s:source("mappings.vim")

" Show syntax highlighting groups for word under cursor
nmap <C-O> :call <SID>SynStack()<CR>
function! <SID>SynStack()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
